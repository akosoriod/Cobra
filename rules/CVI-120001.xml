<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="SSRF caused by cURL"/>
    <language value="php"/>
    <match mode="regex-param-controllable"><![CDATA[curl_setopt\s*\(.*,\s*CURLOPT_URL\s*,(.*)\)]]></match>
    <repair block="in-function"><![CDATA[curl_setopt\s?\(.*,\s?CURLOPT_PROTOCOLS\s?,(.*)\)]]></repair>
    <level value="6"/>
    <test>
        <case assert="true"><![CDATA[
            function curl($url){
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_exec($ch);
                curl_close($ch);
            }
            $url = $_GET['url'];
            curl($url);
        ]]></case>
    </test>
    <solution>
        ## Security Risks
        SSRF vulnerability (Server-Side Request Forgery)

        ### Formation principle
        SSRF is mostly formed because the server side provides the ability to obtain data from other server applications and does not filter and restrict the target address.

        ### Risk
        1, the attacker can extranet, the server intranet, local port scanning, to obtain the service banner information.
        2, attacking applications running on the intranet or local.
        3、Fingerprinting of intranet web applications.
        4、Attack the intranet and outtranet web applications.
        5、Use file protocol to read local files, etc.


        ### Example
        ```php
        function curl($url){
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_exec($ch);
            curl_close($ch);
        }
        $url = $_GET['url'];
        curl($url);
        ```
        The above code does not do any SSRF defense, and the risk is exemplified as follows:

        ```
        # Read arbitrary files using the file protocol
        curl -v 'http://test.com:8082/ssrf.php?url=file:///etc/passwd'

        # View port using dict protocol
        curl -v 'http://test.com:8082/ssrf.php?url=dict://127.0.0.1:22'
        ```

        ## Restoration Solutions
        1. Restrict the protocol to HTTP, HTTPS
            ```
            curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);
            ```
        2. restrict requesting domain whitelist
        3. disable 30x bounces
            ```
            Delete curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
            ```
    </solution>
    <status value="on"/>
    <author name="Feei" email="feei@feei.cn"/>
</cobra>