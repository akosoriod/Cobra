<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="SQL Execute Functions"/>
    <language value="php"/>
    <match mode="function-param-controllable"><![CDATA[(mysqli_query|pg_execute|pg_insert|pg_query|pg_select|pg_update|sqlite_query|msql_query|mssql_query|odbc_exec|fbsql_query|sybase_query|ibase_query|dbx_query|ingres_query|ifx_query|oci_parse|sqlsrv_query|maxdb_query|db2_exec)]]></match>
    <level value="8"/>
    <test>
        <case assert="true"><![CDATA[
            $username = $_POST['username'];
            $password = $_POST['password'];
            $query = "SELECT * FROM users WHERE user = $username AND password = $password ";
            mysqli_query($query);
        ]]></case>
        <case assert="false"><![CDATA[
            $username = "user";
            $password = "cobra123";
            $query = "SELECT * FROM users WHERE user = $username AND password = $password ";
            mysqli_query($query);
        ]]></case>
    </test>
    <solution>
## Security risks

        ### Causes of SQL injection formation
        SQL statements are user controllable, but SQL injection can occur if there is not enough filtering of parameters.

        ### Risks
        - User information is tampered with
        - Attacker steals code and user data
        - All data of business operation is maliciously obtained
        - Online code is illegally tampered with and causes the impact of sending traffic or other benefits to malicious attackers

        ## Fix Solution
        - The functions that are no longer used are directly taken offline.
        - Introduce security components
        - Code level fix: strict filtering of user-controllable parameters
    </solution>
    <status value="on"/>
    <author name="Feei" email="feei@feei.cn"/>
</cobra>