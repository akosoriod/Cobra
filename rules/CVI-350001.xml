<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="extract leads to variable override vulnerability"/>
    <language value="php"/>
    <match mode="function-param-controllable"><![CDATA[unlink]]></match>
    <repair block="in-function-up"><![CDATA[in_array]]></repair>
    <level value="3"/>
    <test>
        <case assert="true"><![CDATA[
            $file = $_POST["file_name"];
            unlink($file);
        ]]></case>
        <case assert="false"><![CDATA[
            $file = "ping.txt";
            unlink($file);
        ]]></case>
    </test>
    <solution>
       ## Security risks
        Insufficient filtering of this parameter was considered when using the unlink function to delete files, resulting in a vulnerability of multiple arbitrary file deletions.

        ## Fix Solution
        Strictly filter the parameters entered by the user (e.g. use in_array to set the range of allowed parameters).

        ## Sample code
        ```php
        f($post_submit_action == "delete_file"){
            $file_name = $_POST["file_name"];
            $file = "/home/file/". $file_name;
            unlink($file);
            return;
        }
        ```
        The POST parameter is used as an argument to the unlink function when we submit `file_name=... /... /index.php` will lead to an arbitrary file deletion vulnerability.
        Strict parameter filtering should be set according to actual needs.
    </solution>
    <status value="on"/>
    <author name="Lightless" email="viarus@qq.com"/>
</cobra>