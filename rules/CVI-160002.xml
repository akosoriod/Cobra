<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="Splicing SQL Injection"/>
    <language value="php"/>
    <match mode="regex-only-match"><![CDATA[(\"\s*(select|SELECT|insert|INSERT|update|UPDATE)\s*(([^;]\s*)*)?\$(.+?);?\")]]></match>
    <level value="8"/>
    <test>
        <case assert="true"><![CDATA[$query  = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset;";]]></case>
        <case assert="false"><![CDATA[$query  = "SELECT id FROM products LIMIT 20 ;";]]></case>
        <case assert="true"><![CDATA[$s = "select"  + $v + "from " + $tb + "where id = " + $id;]]></case>
        <case assert="true"><![CDATA[
            $query  = "SELECT id, name, inserted, size FROM products
                    WHERE size = '$size'
                    ORDER BY $order
                    LIMIT $limit, $offset;";
        ]]></case>
    </test>
    <solution>
 ## Security risks

        ### SQL injection vulnerability formation causes
        SQL statement splicing, if not filtered enough for user controllable parameters, may lead to SQL injection

        ### Risks
        - User information is tampered with
        - Attacker steals code and user data
        - Data of business operations is maliciously obtained
        - Online code is illegally tampered with and causes the impact of sending traffic or other benefits for malicious attackers

        ## Fix Solution
        - If the function is no longer in use, it should be taken offline directly.
        - Introduce security components
        - Code level fix: Try not to splice SQL statements. If necessary, strict filtering of user-controllable parameters is required

        ## Example

        ```php
        <?php
            $username = $_POST['username'];
            $password = $_POST['password'];
            $query = "SELECT * FROM users WHERE user = $username AND password = $password;";
            mysql_query($query);
        ?>
        ```
        If the input data is
        ```php
        $_POST['username'] = 'adan';
        $_POST['password'] = '' OR ''='';
        ```

        The SQL statement becomes `SELECT * FROM users WHERE user='adan' AND password='' OR ''=''` SQL injection occurs and the attacker can log in without a password.
        Try not to use spliced SQL statements. If you have to use it, try not to control the parameters of the SQL statement by the user.
        If you have to use user-controlled SQL statements, strictly restrict and filter the parameters entered by the user.
    </solution>
    <status value="off"/>
    <author name="Feei" email="feei@feei.cn"/>
</cobra>
