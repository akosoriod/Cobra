<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="Variable override vulnerability"/>
    <language value="php"/>
    <match mode="function-param-controllable"><![CDATA[import_request_variables|parse_str|mb_parse_str]]></match>
    <level value="4"/>
    <test>
        <case assert="true"><![CDATA[import_request_variables('G');]]></case>
        <case assert="true"><![CDATA[parse_str($_SERVER['QUERY_STRING']);]]></case>
        <case assert="true"><![CDATA[
            $encoded_string = $_POST['str'];
            mb_parse_str($encoded_string, $result);
        ]]></case>
    </test>
    <solution>
        ## Security risks
        Variable Override Vulnerability

        ## Fix solution
        1 Use the original variables, do not register the variables, directly use the native $_GET, $_POST and other array variables for operation.
        2 Judge whether the variable exists before registering it. The variables declared by yourself must be initialized, otherwise the uninitialized variables can be overwritten even if the code of the registered variables is at the top of the execution process.

        ## Sample code

        ### Sample error code
        ```php
        <?php
            $a = '0';
            import_request_variables('G');
            if($a == 1){
              echo "true!";
            }else{
              echo "false!";
            }
        ?>
        ```
        Constructing http://www.test.com/test.php?a=1 will print out true

    </solution>
    <status value="on"/>
    <author name="Feei" email="feei@feei.cn"/>
</cobra>