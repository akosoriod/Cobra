<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="File Inclusion Vulnerability"/>
    <language value="php"/>
    <match mode="function-param-controllable"><![CDATA[include|include_once|require|require_once|parsekit_compile_file|php_check_syntax|runkit_import|virtual]]></match>
    <level value="7"/>
    <test>
        <case assert="true"><![CDATA[include($_GET['file']);]]></case>
        <case assert="true"><![CDATA[require_once($_GET['file']);]]></case>
    </test>
    <solution>
        ## Security risks
        LFI/FRI (local file inclusion/remote file inclusion)

        ### Formation
        When introducing a file, the referenced file name is user-controllable, and if the passed parameters are not restricted to filter or checksum is bypassed, this can lead to accidental file leaks or even malicious code injection.

        ### Impact Scope
        When an attacker includes a specific file via this vulnerability, the file will be executed for the corresponding code.

        ## Fixing solution
        1. You should try to avoid including dynamic variables, especially those that the user can control.
        2. Set up a whitelist (using an enumeration)
        ```php
        <?php
            $file = $_GET['file'];
            //Whitelisting possible values
            switch ($file) {
                case 'main':
                case 'foo':
                case 'bar':
                    include '/home/wwwroot/include/'.$file.'.php';
                    break;
                default:
                    include '/home/wwwroot/include/main.php';
            }
        ?>
        ```
    </solution>
    <status value="on"/>
    <author name="Feei" email="feei@feei.cn"/>
</cobra>